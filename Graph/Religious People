#include<bits/stdc++.h>
using namespace std;

long long int bfs(vector<int> adjacency[], long long int Temple, long long Road, long long int V, int source, vector<bool> &visited){
 queue<int> que;
 que.push(source);
 long long int sum = 0;
 while(!que.empty()){
  int front = que.front();
  que.pop();
  if(!visited[front]){
   sum = sum + Temple;
  }
  visited[front] = true;
  int i = front;
  for(long long int j =0; j<adjacency[i].size(); j++){
   if(!visited[adjacency[i][j]]){
    if(Road<=Temple){
     sum += Road;
    }
    else{
     sum += Temple;
    }
    visited[adjacency[i][j]] = true;
    que.push(adjacency[i][j]);
   }
  }
 }
 return sum;
}

int main() {
 int t;
 cin>>t;
 while(t--){
  int V, E;
  cin>>V>>E;
  long long int Temple, Road;
  cin>>Temple>>Road;
  vector<int> adjacency[V+1];
  for(int i=0; i<E; i++){
   int v1, v2;
   cin>>v1>>v2;
   adjacency[v1].push_back(v2);
   adjacency[v2].push_back(v1);
  }
  long long int ans = 0;
  vector<bool> visited(V+1, false);
  for(int i=1; i<=V; i++){
   if(!visited[i]){
    ans += bfs(adjacency, Temple, Road, V, i, visited);
   }
  }
  cout << ans << endl;
 }
 return 0;
}
