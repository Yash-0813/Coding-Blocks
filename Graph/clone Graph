import java.util.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;
class Node {
    public int val;
    public List<Node> neighbors;
    
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
public class Main {
    public static Node cloneGraph(Node node) {
       // write code here 
     if(node == null) return null; 
        Node tmp = new Node(node.val); 
        Node[] visited = new Node[101]; 
        Arrays.fill(visited , null); 
        depthforsearch(node , tmp , visited); 
        return tmp; 
    }

  public static void depthforsearch(Node node , Node tmp , Node[] visited){
        visited[tmp.val] = tmp;
        for(Node currentNeigh : node.neighbors){
            if(visited[currentNeigh.val] == null){
                Node newnode = new Node(currentNeigh.val);
                tmp.neighbors.add(newnode);
                depthforsearch(currentNeigh , newnode , visited);
            }else{
                tmp.neighbors.add(visited[currentNeigh.val]);
            }
        }
  }

    public static void main(String[] args) throws IOException {
        Scanner s= new Scanner(System.in);
        int currentNeigh = s.nextInt(); // number of nodes in graph
        Node [] nodes = new Node[currentNeigh];
        for(int i = 0 ;i<currentNeigh;i++){
            nodes[i]= new Node(i+1);
        }
        for(int i = 0;i<currentNeigh;i++){
            int m = s.nextInt(); //num of neighbors connected with ith node
            while(m-->0){
                nodes[i].neighbors.add(nodes[s.nextInt()-1]); // connecting neighbours
            }
        }
        //printing graph
        System.out.print("Original graph :- ");
        get(nodes[0],currentNeigh);           // original graph
        System.out.println();
        System.out.print("Copied graph :- ");
        Node output = cloneGraph(nodes[0]);
        get(output,currentNeigh);            // coppied graph
        
    }

    public static void get(Node output ,int currentNeigh){

        boolean [] visited = new boolean [currentNeigh];
        Queue<Node> queue =  new LinkedList<>();
        queue.add(output);
        visited[output.val-1]=true;
        while(!queue.isEmpty()){
            Node x = queue.poll();
            System.out.print(x.val+" ");
            if(x.neighbors!=null){
                for(Node curr : x.neighbors){
                    if(!visited[curr.val-1]){
                        queue.add(curr);
                        visited[curr.val-1]=true;
                    }
                }
            }
        }
    }

    
}
