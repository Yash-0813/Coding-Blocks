import java.util.*;
public class Main {
    public static void main (String args[]) {
        Scanner sc=new Scanner(System.in);
        int m=sc.nextInt();
        int n=sc.nextInt();
        int[][] grid=new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                grid[i][j]=sc.nextInt();
            }
        }

        System.out.println(minPathSum(grid));
    }

    public static int minPathSum(int[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        int[][]dp=new int[m][n];
        for(int[]a:dp){
            Arrays.fill(a,-1);
        }
        return minsum(grid,0,0,m,n,dp);
    }
    private static int minsum(int[][]grid,int currrow,int currcol,int m,int n,int[][]dp){
        if(currrow>=m || currcol>=n){
            return 1001;
        }
        if(currrow==m-1 && currcol==n-1){
            return grid[currrow][currcol];
        }
        if(dp[currrow][currcol]!=-1){
            return dp[currrow][currcol];
        }
        int downmove=minsum(grid,currrow+1,currcol,m,n,dp);
        int rightmove=minsum(grid,currrow,currcol+1,m,n,dp);
        
        dp[currrow][currcol]=grid[currrow][currcol]+Math.min(rightmove,downmove);
        return dp[currrow][currcol];
    }
}
